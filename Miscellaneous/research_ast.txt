$ echo hey && (echo salut ; echo seet) ; echo yes
OUTPUT:
hey
salut
seet
yes


FINDINGS:	each time we have "(" parenthesis couple, it is a subshell.
Therefore we can start a node in the abstract tree that is similar to a start
node. see the whole explanation under:


exemple: 

the top layer of our syntax is a node called list_sh ("list" in the shell
grammar, but we will have to call it list_sh because of the libft).

[node_list]
----------this is a list of two sequantial and_or:-----------------------------
and_or ; and_or

note: at this level it will be a basic link list, it is "sequential".

 |
 |
 |
 V

[node and_or]
----------an and_or would be:--------------------------------------------------
pipe_sequence
or
| AND_IF pipe_sequence
or
| OR_IF pipe_sequence

note: at this level it should be a linked list, and we execute the following
link only if necessary according to a boolean (for example if previous exit
status is true and it is a OR link, then no need to execute...)

 |
 |
 |
 V

[node pipe_sequence]
----------pipe_sequence would be:----------------------------------------------
pipe_sequence | command
or
command

note:	at this level all the commands will have to be launched synchronously
because it is a pipeline. thats one of the difficult parts of the project.
it can be a linked list, but we wont wait for the previous to finish before
we lauch the next command from the linked list.

 |
 |
 |
 V

[node command]
----------command would be:----------------------------------------------------
simple_command
or
compound_command

note: at this level:
1) if it is a simple command: either we just look for a command with $PATH
or we use a builtin.
2) it is a "subshell" and we have a node thats starts a whole new subtree
			(it is like a recursion in our tree structure).

 |
 |
 |
 V

[node simple_command]
[node compound_command]

[node compound_command] =====>> [node list_sh]
compound_command in our case is a "subshell" or a "brace groupe" which is the
same thing. It will occure if we met parenthesis:
this is where the node will have the exact same structure as the very top node:
the node list_sh
All we need to do if we encounter a parenthesis is to start a new node that and
all its child will represent a nested shell or "subshell"

