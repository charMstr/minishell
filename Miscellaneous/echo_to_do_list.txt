===============================================================================
======= RECAP
===============================================================================
	- separer les words des tokens de redirections
	- expandre les words (pas de petites feintes).
		bien capter que les '\' sont un truc a enlenver au moment de unquote.
	- expandre les redirections. (petites feintes: pas de field spliting, pas
	de pathname expansion si on voit que ca donne plue de 1 resultat.

	lors d'un pipe, en premier les branchements sont faits, et en second lieu,
	les commandes sont executes, et c'est a ce moment la que les expansions et
	tout le tralala sont faits, pas avant. important pour pouvoir avoir les
	messages d'erreur au bon moment. du style:
		echo > $ab salut -->   bash: $ab: ambiguous redirect 
		echo > "$ab" salut --> bash: : No such file or directory
===============================================================================


===============================================================================
======= WORD EXPANSION.
===============================================================================
1. parameter expansion
2. field splitting
3. pathname expansion
4. quote removal.

1. parameter expansion:

we will just take care of the case when we have the $ sign followed by
characters. => not using the optional '{' and  '}'

 a). not happening in simple quotes.
 b). within double quotes:
 	- if the dollar sign is escaped. its not an expansion anymore.
 	- if there is just the dollarsign and nothing or a whitespace. just print
		the '$' as is
	- if there is characters appended to the dollar sign (except for the star)
		we consider the name of the variable to be everything up to the
		whitespace or EOS or star.
		if the name is matching in the environment variables-> replaced.
		else the $ and whatever string was appended is replaced by null.
		example:
		echo "hey$a " --> 'hey '
 c). outside of double quotes: as above (b.)

 2. field splitting:
 
 permet de creer plusieurs sous token a partir de 1 token.
 note:	ne pas faire dans le cas des redirections. (on ne pas produire plus de
 		1 word!). valide par tests et doc.

 Se fait apres le param expansion. Ne pas le faire si la paramter expansion a 
 ete faite entre quotes.
 note: si IFS n'est pas set (pas present dans env) on part du principe que sa
 valeur est: <space>,<tab>,<newline>.
 note2: si IFS est set to null, alors pas de field slitting du tout

 3. pathname expansion:
 	bonus avec les asterix. laisser de la place pour cela. peut aboutir a plus
 	de un WORD, donc prevoir que la liste chainee puisse etre extendue.
	
	note: dans le cas d'un word de redirection. n'effectuer l'expansion que si
	elle donne une seul possibilite, sinon imprimer un truc du style:
		bash: sal*: ambiguous redirect 

	si un fichier commence par un '.', il faut quil soit ecrit explicitement.
	If the pattern does not match any existing filenames or pathnames, the
	pattern string shall be left unchanged.
	
	The <slash> character in a pathname shall be explicitly matched by using
	one or more <slash> characters in the pattern; (donc pas avec une etoile).

	lire le petit paragraphe qui parle des droit de read si on cherche dans des
	dossiers et sous dossiers, mains sinon tout est la.

 4. quote removal:

 The quote characters ( <backslash>, single-quote, and double-quote) that were
 present in the original word shall be removed unless they have themselves been
 quoted. faire bien atention au backslash! :)

===============================================================================


===============================================================================
======= NOTES on REDIRECTIONS 
===============================================================================
redirections:
	if the expansions of the filename result in an empty string, wether it was
	quoted or not we end up with two differenct behaviours.
	example:
	echo > $ab salut -->   bash: $ab: ambiguous redirect 
	echo > "$ab" salut --> bash: : No such file or directory

	one thing to note: the parameter expansion happens no matter what in the
	quoted case...

	good thing. word expansion are done separatly on redirections...

	pathname expansion are done only when the expansion results in only one
	word, no more

	word expansion is done, so is quote removal... but not field spliting
===============================================================================


===============================================================================
======= executer une commande: OK
===============================================================================
 1. words that are recognized to be part of redirection are set aside for step3
 2. expand the words that are left here. note: after expansion, there can be no
	 fields remaining.
	 note: If there is no command name, any redirections shall be performed in
	 a subshell environment; 
	 note: if there is no command name: the command shall complete with a zero
	 exit status.
 3. Redirections shall be performed as described in Redirection section...

-----------------------
 4. execution:
 ----------------------
 a) command name does not contain any slash character: (perform first match)
 	- builtin? -> call builin
	- else the command shall be searched for using the PATH environment variabl
		- If the search is unsuccessful, the command shall fail with an exit
			status of 127 and the shell shall write an error message.
		- if successful: see documentation. but basically doing a execl and
			everything is the same as the next case b)...
 b) do a execl, no need to search because "we already have" path.
===============================================================================


===============================================================================
======= ECHO
===============================================================================
-n option:
	has to be first in the command arguments.
	can be quoted, singly ou doubly.
	if quoted, cannot contain any other character within the quotes.
===============================================================================
